---
description: Mandatory instructions for Supabase declarative schema management
alwaysApply: false
---

# Database: Declarative Database Schema Management

You are a Supabase database expert specializing in declarative schema management. Follow these **mandatory instructions** for all database schema modifications:

## 1. Exclusive Use of Declarative Schema

### Core Principle
- **All schema modifications must be declared in `.sql` files** located in `supabase/schemas/` directory
- **Never manually create or modify files** in `supabase/migrations/` directory
- Migration files are **automatically generated** by the Supabase CLI from schema declarations
- Direct migration editing is **strictly prohibited** except for known caveats (see section 6)

### What This Means
```
✅ CORRECT WORKFLOW:
  1. Define/modify entity in supabase/schemas/
  2. Run supabase db diff to generate migration
  3. Review generated migration
  4. Apply migration

❌ INCORRECT WORKFLOW:
  1. Manually write migration file
  2. Apply directly
  3. Skip schema declaration
```

## 2. Schema Declaration Standards

### File Location
```
supabase/
├── schemas/
│   ├── 01_leagues.sql
│   ├── 02_teams.sql
│   ├── 03_games.sql
│   ├── 04_reservations.sql
│   ├── 05_users.sql
│   └── 06_functions_and_triggers.sql
└── migrations/
    └── (Auto-generated by CLI)
```

### File Naming Convention
- Use **numeric prefixes** (01_, 02_, etc.) to control execution order
- Order depends on **table dependencies** and **foreign keys**
- Names should be **descriptive** (e.g., `01_leagues.sql`, `03_games.sql`)

### Schema File Contents
Each `.sql` file should contain the **complete, final state** of the entity:

```sql
-- supabase/schemas/01_leagues.sql
-- Complete table definition (not incremental)

CREATE TABLE IF NOT EXISTS public.leagues (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  slug TEXT NOT NULL UNIQUE,
  icon_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_leagues_slug ON public.leagues(slug);

-- Enable RLS
ALTER TABLE public.leagues ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Leagues are readable by everyone"
ON public.leagues FOR SELECT USING (true);
```

### File Execution Order
Schema files are executed in **lexicographic order**. Plan file names to handle dependencies:

```
01_leagues.sql          (no dependencies)
02_teams.sql            (depends on leagues)
03_games.sql            (depends on teams)
04_skybox_featured.sql  (depends on games)
05_users.sql            (no dependencies)
06_reservations.sql     (depends on users, games)
07_functions.sql        (depends on other tables)
```

## 3. Migration Generation Process

### Prerequisites
1. **Stop the local Supabase environment:**
   ```bash
   supabase stop
   ```
   This ensures a clean state for diff generation

2. **Make schema declarations** in `supabase/schemas/`

### Generate Migrations

After declaring schema changes, generate migrations:

```bash
# Basic diff (creates migration with default name)
supabase db diff

# Named migration (recommended)
supabase db diff -f add_game_status_enum
supabase db diff -f add_broadcasts_column
supabase db diff -f create_reservations_table
```

### Review Generated Migration

```bash
# Check the generated migration file
cat supabase/migrations/TIMESTAMP_add_game_status_enum.sql

# Verify:
# ✓ Changes match your schema declarations
# ✓ No unintended modifications
# ✓ Syntax is correct
# ✓ Foreign keys are proper
# ✓ Indexes are created
```

### Apply and Test Locally

```bash
# Start Supabase with migrations
supabase start

# Test the migration
supabase db pull  # Pull latest schema to verify

# Test data operations
# (Use Supabase dashboard or direct queries)

# Verify RLS policies
# (Test with authenticated and unauthenticated access)
```

## 4. Schema File Organization & Dependencies

### Dependency Graph Example

```
01_extensions.sql
    ↓
02_enums.sql (if using custom types)
    ↓
03_leagues.sql
    ↓
04_teams.sql (foreign key: league_id → leagues.id)
    ↓
05_games.sql (foreign keys: league_id, home_team_id, away_team_id)
    ↓
06_users.sql
    ↓
07_reservations.sql (foreign keys: user_id, game_id)
    ↓
08_functions.sql (functions that operate on tables)
    ↓
09_triggers.sql (triggers that reference functions)
```

### Naming Strategy for Order

```sql
-- Files are executed alphabetically/numerically
-- Use prefixes to control order:

01_[entity].sql         (foundational tables)
02_[entity].sql         (tables depending on 01_)
03_[entity].sql         (tables depending on 02_)
...

-- Example order:
01_leagues.sql
02_teams.sql            -- needs 01_leagues
03_games.sql            -- needs 01_leagues, 02_teams
04_featured_games.sql   -- needs 03_games
05_users.sql
06_reservations.sql     -- needs 05_users, 03_games
07_functions.sql        -- needs all tables
08_triggers.sql         -- needs 07_functions
```

### Adding New Columns

When adding columns to existing tables:
- **Append new columns to the end** of the table definition
- Minimizes unnecessary diffs
- Makes migrations cleaner and easier to review

```sql
-- ✅ GOOD - Appending column
CREATE TABLE IF NOT EXISTS public.games (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  league_id BIGINT NOT NULL REFERENCES public.leagues(id),
  home_team_id BIGINT NOT NULL REFERENCES public.teams(id),
  away_team_id BIGINT NOT NULL REFERENCES public.teams(id),
  game_datetime TIMESTAMP WITH TIME ZONE NOT NULL,
  status TEXT DEFAULT 'scheduled',
  score_home INT,
  score_away INT,
  broadcast_networks TEXT[],
  venue TEXT,
  notes TEXT,  -- NEW COLUMN - appended at end
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ❌ AVOID - Inserting in middle
-- Don't put new columns in the middle of definitions
```

## 5. Rollback Procedures

### Reverting Schema Changes

If you need to rollback database schema:

1. **Update schema files** to desired state:
   ```bash
   # Edit supabase/schemas/XX_entity.sql
   # Remove or modify the unwanted entity definition
   vim supabase/schemas/03_games.sql
   ```

2. **Generate rollback migration:**
   ```bash
   supabase stop
   supabase db diff -f rollback_remove_game_status
   ```

3. **Review rollback migration carefully:**
   ```bash
   cat supabase/migrations/TIMESTAMP_rollback_remove_game_status.sql
   
   # IMPORTANT: Check for:
   # ⚠️ DROP TABLE / DROP COLUMN statements
   # ⚠️ Data loss implications
   # ⚠️ Foreign key constraints
   # ⚠️ Dependent views/functions
   ```

4. **Test rollback in development:**
   ```bash
   supabase start
   # Verify the rollback worked as expected
   # Check data integrity
   ```

### Reverting Data Changes (Not Schema)

For data-only rollbacks (INSERT, UPDATE, DELETE), add to migrations manually:

```sql
-- supabase/migrations/TIMESTAMP_rollback_data.sql
-- Use explicit data manipulation statements

DELETE FROM public.games WHERE id > 1000;  -- Remove test data

UPDATE public.games 
SET status = 'scheduled' 
WHERE status IS NULL;  -- Revert status changes
```

## 6. Known Caveats & Limitations

### These entities are NOT automatically tracked by schema diff:

#### ❌ Data Manipulation Language (DML)
```sql
-- These are NOT captured by schema diff:
INSERT INTO public.leagues VALUES (...);
UPDATE public.teams SET logo_url = '...';
DELETE FROM public.games WHERE id = 123;

-- SOLUTION: Add these to migrations manually
-- supabase/migrations/TIMESTAMP_seed_data.sql
INSERT INTO public.leagues (name, slug) VALUES ('NFL', 'nfl');
```

#### ❌ View Ownership & Permissions
```sql
-- Not tracked:
-- - View owner changes
-- - SECURITY INVOKER on views
-- - Materialized views
-- - View column type alterations

-- SOLUTION: Use migrations manually for views
-- supabase/migrations/TIMESTAMP_create_views.sql
CREATE VIEW public.upcoming_games AS ...;
ALTER VIEW public.upcoming_games OWNER TO postgres;
```

#### ❌ RLS Policy Modifications
```sql
-- These are NOT captured:
ALTER POLICY "policy_name" ON public.games ...;
-- Column-level privileges
-- Policy updates

-- SOLUTION: Drop and recreate policies in schema files
DROP POLICY IF EXISTS "old_policy" ON public.games;
CREATE POLICY "new_policy" ON public.games
FOR SELECT USING (auth.uid() = user_id);
```

#### ❌ Other Limitations
```
-- Not tracked by schema diff:
- Schema-level privileges
- Comments on tables/columns
- Table partitions
- ALTER PUBLICATION statements
- CREATE DOMAIN statements
- GRANT statements
```

### Handling Known Caveats

For any of the above, add to migrations directly:

```bash
# Create a manual migration for entities not auto-tracked
supabase migration new add_rls_policies
supabase migration new seed_initial_leagues
supabase migration new create_custom_views

# Edit the migration file manually:
vim supabase/migrations/TIMESTAMP_add_rls_policies.sql
```

## Complete Schema Workflow Example

### Step 1: Declare Schema
```sql
-- supabase/schemas/03_games.sql
CREATE TABLE IF NOT EXISTS public.games (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  league_id BIGINT NOT NULL REFERENCES public.leagues(id) ON DELETE CASCADE,
  home_team_id BIGINT NOT NULL REFERENCES public.teams(id) ON DELETE CASCADE,
  away_team_id BIGINT NOT NULL REFERENCES public.teams(id) ON DELETE CASCADE,
  game_datetime TIMESTAMP WITH TIME ZONE NOT NULL,
  status TEXT NOT NULL DEFAULT 'scheduled',
  score_home INT,
  score_away INT,
  broadcast_networks TEXT[],
  venue TEXT,
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_games_datetime ON public.games(game_datetime);
CREATE INDEX IF NOT EXISTS idx_games_league ON public.games(league_id);
CREATE INDEX IF NOT EXISTS idx_games_status ON public.games(status);

-- Enable RLS
ALTER TABLE public.games ENABLE ROW LEVEL SECURITY;

-- RLS Policies (basic example)
CREATE POLICY "Games readable by all"
ON public.games FOR SELECT USING (true);
```

### Step 2: Generate Migration
```bash
supabase stop
supabase db diff -f create_games_table
# Output: supabase/migrations/20241023143000_create_games_table.sql
```

### Step 3: Review Migration
```bash
cat supabase/migrations/20241023143000_create_games_table.sql

# Verify:
# ✓ CREATE TABLE public.games (...) present
# ✓ Foreign keys to leagues and teams
# ✓ Indexes created
# ✓ RLS enabled
# ✓ Policies created
```

### Step 4: Apply & Test
```bash
supabase start
supabase db pull  # Verify schema matches

# Test in dashboard:
# - Insert test game
# - Verify RLS policies work
# - Test filtering by league
```

### Step 5: Add New Column Later
```sql
-- supabase/schemas/03_games.sql - UPDATED
CREATE TABLE IF NOT EXISTS public.games (
  -- ... all existing columns ...
  notes TEXT,
  broadcast_url TEXT,  -- NEW COLUMN - at end
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
-- ... rest of file unchanged ...
```

```bash
supabase stop
supabase db diff -f add_broadcast_url_to_games
supabase start
```

## Best Practices Summary

✅ **DO:**
- Keep schema files in `supabase/schemas/`
- Use numbered prefixes for execution order
- Declare complete final state in schema files
- Stop Supabase before running `db diff`
- Review generated migrations carefully
- Test migrations locally before deploying
- Use descriptive migration names
- Append new columns to end of table definitions

❌ **DON'T:**
- Manually edit migration files (auto-generated)
- Use migrations for schema changes (use schema declarations)
- Run `db diff` while Supabase is running
- Modify schema files incrementally
- Insert columns in the middle of table definitions
- Forget to handle known caveats manually
- Deploy untested migrations

## Troubleshooting

### Migration doesn't capture all changes
- Verify schema files have complete entity definitions
- Check file naming order (lexicographic)
- Ensure Supabase was stopped before `db diff`
- Check for known caveats (RLS policies, views, etc.)

### Diff shows unexpected changes
- Review schema files for unintended modifications
- Check existing database state: `supabase db pull`
- Verify column order and types match schema files

### RLS policies not included in migration
- RLS policies may not be fully tracked
- Manually add to schema file or migration
- Test policies after applying migration

### Foreign key constraints failing
- Check table execution order in file names
- Ensure referenced tables exist first
- Verify ON DELETE/ON UPDATE clauses

## Commands Reference

```bash
# Stop development environment
supabase stop

# Generate migration from schema declarations
supabase db diff -f <migration_name>

# Start environment with migrations
supabase start

# Pull current schema to verify
supabase db pull

# View migration files
ls -la supabase/migrations/

# Test specific migration
supabase migration test

# Rollback local changes
supabase db reset
```

---

**IMPORTANT:** Non-compliance with declarative schema management instructions may lead to inconsistent database states and is strictly prohibited. Always use this workflow for production-safe, version-controlled database changes.
